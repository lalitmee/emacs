* interface tweeks
** "<s-Tab" will create the code block
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(fset 'yes-or-no-p' 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
(set-face-attribute 'default (selected-frame) :height 200)
(show-paren-mode 1)
#+END_SRC

* try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

* which key
**   Brings up some help
   #+BEGIN_SRC emacs-lisp
   (when (eq system-type 'darwin) ;;mac specific settings
     (setq mac-option-modifier 'alt)
     (setq mac-command-modifier 'meta)
     (global-set-key [kp-delete] 'delete-char) ;; sets fn-delete to be right-delete
     )     

   (use-package which-key
      :ensure t
      :config (which-key-mode))
   #+END_SRC

* All the rest
#+BEGIN_SRC emacs-lisp
;; Org-mode stuff
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(setq indo-enable-flex-matching t)

(setq ido-everyewhere t)
(ido-mode 1)

(defalias 'list-buffers 'ibuffer)
;; (defalias 'list-buffers 'ibuffer-other-window)


; If you like a tabbar
(use-package tabbar
  :ensure t
  :config
  (tabbar-mode 1))

(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-fae-foreground :height 3.0)))))
    ))

(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))
  
;; 
;; Search with avy - not sure of the power of search ...

(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))

;;
;; auto-complete - this is truely awesome!!
;;
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
#+END_SRC
* Search with swiper
#+BEGIN_SRC emacs-lisp
  ;;
  ;; search with swiper - precondition counsel package needs to be installed
  ;;
  (use-package counsel
    :ensure t
    )
  (use-package swiper
    :ensure try
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))

#+END_SRC
* Themes
#+BEGIN_SRC emacs-lisp
  ;;
  ;; Themes  M-x customize-themes
  ;;
  ;;(load-theme 'leuven t)

  (use-package color-theme
  :ensure t)

  (use-package zenburn-theme
  :ensure t
  :config (load-theme 'zenburn t))

  (load-theme 'leuven t)
#+END_SRC

* Reveal.js
  #+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
  :ensure ox-reveal)
  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-reveal-mathjax t)

  (use-package htmlize
  :ensure t)
  #+END_SRC
* Python hook
;;#+BEGIN_SRC emacs-lisp
;;  (setq python-python-command "/usr/bin/python")
;;  (require 'python-mode)
  ;; (setq-default py-shell-name "/usr/local/bin/python")
  ;; (setq  python-shell-interpreter "/usr/local/bin/python")
;;  (setq py-force-py-shell-name-p t)

  ; switch to the interpreter after executing code
;;  (setq py-shell-switch-buffers-on-execute-p t)
;;  (setq py-switch-buffers-on-execute-p t)
  ; don't split windows
;;  ;(setq py-split-windows-on-execute-p nil)
  ; try to automagically figure out indentation
;;  (setq py-smart-indentation t)
;;#+END_SRC

* Python
#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))

    (use-package elpy
    :ensure t
    :config 
    (elpy-enable))


#+END_SRC

* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC.

* Yasnippet
  #+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
  #+END_SRC
 
** flask.pocoo.org - flask is the web development with python 
